#!/usr/bin/env bash

# SPDX-FileCopyrightText: 2022 Citadel and contributors
#
# SPDX-License-Identifier: GPL-3.0-or-later

set -euo pipefail

CITADEL_ROOT="$(readlink -f $(dirname "${BASH_SOURCE[0]}")/..)"
CLI_NAME="$(basename $0)"
CLI_VERSION="0.0.1"
EDITOR="${EDITOR:-micro}"

if [ -z ${1+x} ]; then
  command=""
else
  command="$1"
fi

show_help() {
  cat <<EOF
${CLI_NAME}-cli v${CLI_VERSION}
Manage your Citadel.

Usage: ${CLI_NAME} <command> [options]

Flags:
    -h, --help                         Show this help message
    -v, --version                      Show version information for this CLI

Commands:
    debug                              View logs for troubleshooting
    restart                            Restart the Citadel service
    reboot                             Reboot the system
    shutdown                           Shutdown the system
    update                             Update Citadel
    app <command>                      Install, update or restart apps
    configure <service>                Edit service & app configuration files
EOF
}

edit_file() {
  if [[ $1 = "--priviledged" ]]; then
    echo "Editing this file requires elevated priviledges."

    if ! sudo test -f $2; then
      echo "File not found."
      exit 1
    fi

    if sudo test -w $2; then
      sudo $EDITOR $2
    else
      echo "File not writable."
    fi
  else
    if ! test -f $1; then
      echo "File not found."
      exit 1
    fi

    if test -w $1; then
      $EDITOR $1
    else
      echo "File not writable."
    fi
  fi
}

get_update_channel() {
  update_channel_line=$(cat $CITADEL_ROOT/.env | grep UPDATE_CHANNEL)
  update_channel=(${update_channel_line//=/ })

  if [ -z ${update_channel[1]+x} ]; then
    # fall back to stable
    echo "stable"
  else
    echo ${update_channel[1]}
  fi
}

# Debug Citadel
if [[ "$command" = "debug" ]]; then
  shift
  sudo $CITADEL_ROOT/scripts/debug $@
  exit
fi

# Update Citadel
if [[ "$command" = "update" ]]; then
  POSITIONAL_ARGS=()

  branch=$(get_update_channel)
  force=false

  while [[ $# -gt 0 ]]; do
    case $1 in
    -b | --branch)
      branch="$2"
      shift # past argument
      shift # past value
      ;;
    --force)
      force=true
      shift # past argument
      ;;
    -* | --*)
      echo "Unknown option $1"
      exit 1
      ;;
    *)
      POSITIONAL_ARGS+=("$1") # save positional arg
      shift                   # past argument
      ;;
    esac
  done

  set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

  if $force; then
    sudo rm -f $CITADEL_ROOT/statuses/update-in-progress
  fi

  sudo $CITADEL_ROOT/scripts/update/update --repo runcitadel/core#$branch

  exit
fi

# Restart Citadel
if [[ "$command" = "restart" ]]; then
  sudo $CITADEL_ROOT/scripts/stop
  sudo $CITADEL_ROOT/scripts/start
  exit
fi

# Reboot the system
if [[ "$command" = "reboot" ]]; then
  sudo $CITADEL_ROOT/scripts/stop || true
  sudo reboot
  exit
fi

# Shutdown the system
if [[ "$command" = "shutdown" ]]; then
  sudo $CITADEL_ROOT/scripts/stop || true
  sudo shutdown now
  exit
fi

# App commands
if [[ "$command" = "app" ]]; then
  shift
  sudo $CITADEL_ROOT/scripts/app $@
  exit
fi

# Edit common app configuration files
if [[ "$command" = "configure" ]]; then
  if [ -z ${2+x} ]; then
    echo "Specify an app or service to configure."
    echo "Usage: \`$CLI_NAME configure <service>\`"
    exit 1
  fi

  POSITIONAL_ARGS=()

  persist=false

  while [[ $# -gt 0 ]]; do
    case $1 in
    --persist)
      persist=true
      shift # past argument
      ;;
    -* | --*)
      echo "Unknown option $1"
      exit 1
      ;;
    *)
      POSITIONAL_ARGS+=("$1") # save positional arg
      shift                   # past argument
      ;;
    esac
  done

  set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

  # These service and app configs are already persisted
  # TODO: add more apps

  if [[ "$2" = "nextcloud" ]]; then
    edit_file --priviledged $CITADEL_ROOT/app-data/nextcloud/data/nextcloud/config/config.php
    exit
  fi

  if [[ "$2" = "nginx" ]]; then
    edit_file $CITADEL_ROOT/nginx/nginx.conf
    echo "To apply the changes, restart Nginx service with \`docker restart nginx\`."
    exit
  fi

  if [[ "$2" = "electrs" ]]; then
    edit_file $CITADEL_ROOT/templates/electrs-sample.toml
    echo "To apply the changes, restart Citadel with \`$CLI_NAME restart\`."
    exit
  fi

  if $persist; then
    echo "NOTE: As of now persisted config changes will not be kept when updating Citadel."
  else
    echo "NOTE: Some changes to this configuration file may be overwritten the next time you start Citadel."
    echo "To persist changes run the command again with \`$CLI_NAME configure <service> --persist\`"
    echo "For more information regarding what changes will be overwritten, please read the comment at the top of the file."
  fi

  read -p "Continue? [Y/n] " should_continue
  echo
  if [[ $should_continue =~ [Nn]$ ]]; then
    exit
  fi

  # Service and app configs below may be overwritten
  # TODO: check which implementation is running
  # and do "bitcoin" / "lightning" / "electrum"

  if [[ "$2" = "bitcoin" ]]; then
    if $persist; then
      edit_file $CITADEL_ROOT/templates/bitcoin-sample.conf
      echo "To apply the changes, restart Citadel with \`$CLI_NAME restart\`."
    else
      edit_file $CITADEL_ROOT/bitcoin/bitcoin.conf
      echo "To apply the changes, restart Bitcoin service with \`docker restart bitcoin\`."
    fi
    exit
  fi

  if [[ "$2" = "lnd" ]]; then
    if $persist; then
      edit_file $CITADEL_ROOT/templates/lnd-sample.conf
      echo "To apply the changes, restart Citadel with \`$CLI_NAME restart\`."
    else
      edit_file $CITADEL_ROOT/lnd/lnd.conf
      echo "To apply the changes, restart LND service with \`docker restart lightning\`."
    fi
    exit
  fi

  if [[ "$2" = "fulcrumx" ]]; then
    if $persist; then
      edit_file $CITADEL_ROOT/templates/fulcrumx-sample.conf
      echo "To apply the changes, restart Citadel with \`$CLI_NAME restart\`."
    else
      edit_file $CITADEL_ROOT/fulcrumx/fulcrumx.conf
      echo "To apply the changes, restart FulcrumX service with \`docker restart electrum\`."
    fi
    exit
  fi

  echo "No service or app \"$2\" not found."
  exit 1
fi

# Show version information for this CLI
if [[ "$command" = "--version" ]] || [[ "$command" = "-v" ]]; then
  echo "$CLI_NAME v$CLI_VERSION"
  exit
fi

# Show usage information for this CLI
if [[ "$command" = "--help" ]] || [[ "$command" = "-h" ]]; then
  show_help
  exit
fi

# If we get here it means no valid command was supplied
# Show help and exit
show_help
exit
